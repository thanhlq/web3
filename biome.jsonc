{
  "$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
  "formatter": {
    "enabled": true,
    "indentWidth": 2,
    "indentStyle": "space",
    "lineWidth": 120
  },
  // Note: UNIX-like glob patterns {a,b,c} aren't supported yet.
  "files": {
    "ignore": ["./**/node_modules/**", "./public/**", "./build/**", "**/.turbo/**"],
    "include": ["./app/**/", "./*.ts", "./*.js", "./*.json", "./*.jsonc"]
  },
  "overrides": [
    {
      "include": ["./**/tsconfig.*.json"],
      "json": {
        "parser": {
          "allowComments": true,
          "allowTrailingCommas": true
        },
        "formatter": {
          "trailingCommas": "all"
        }
      }
    },
    {
      "include": ["./turbo.json"],
      "json": {
        "parser": {
          "allowComments": true,
          "allowTrailingCommas": false
        },
        "formatter": {
          "trailingCommas": "none"
        }
      }
    }
  ],
  "organizeImports": { "enabled": true },
  "javascript": {
    "globals": [
      "React",

      // We need to manually list every test global variable.
      // See: https://github.com/biomejs/biome/discussions/283.
      "describe",
      "test",
      "testIf",
      "it",
      "expect"
    ],
    "linter": {
      "enabled": true
    },
    "formatter": {
      "quoteStyle": "single",
      "semicolons": "asNeeded"
    }
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "complexity": {
        "noExtraBooleanCast": "error",
        "noMultipleSpacesInRegularExpressionLiterals": "error",
        "noUselessCatch": "error",
        "noWith": "error",
        "noStaticOnlyClass": "off",
        "noBannedTypes": "off"
      },
      "nursery": {
        "useSortedClasses": "error"
      },
      "style": {
        "noParameterAssign": "off",
        "noNonNullAssertion": "off"
      },
      "correctness": {
        "noConstAssign": "error",
        "noConstantCondition": "error",
        "noEmptyCharacterClassInRegex": "error",
        "noEmptyPattern": "error",
        "noGlobalObjectCalls": "error",
        "noInnerDeclarations": "error",
        "noInvalidConstructorSuper": "error",
        "noNewSymbol": "error",
        "noNonoctalDecimalEscape": "error",
        "noPrecisionLoss": "error",
        "noSelfAssign": "error",
        "noSetterReturn": "error",
        "noSwitchDeclarations": "error",
        "noUndeclaredVariables": "error",
        "noUnreachable": "error",
        "noUnreachableSuper": "error",
        "noUnsafeFinally": "error",
        "noUnsafeOptionalChaining": "error",
        "noUnusedLabels": "error",
        "noUnusedVariables": "warn",
        "useIsNan": "error",
        "useValidForDirection": "error",
        "useYield": "error"
      },
      "suspicious": {
        "noApproximativeNumericConstant": "off",
        "noAsyncPromiseExecutor": "error",
        "noCatchAssign": "error",
        "noClassAssign": "error",
        "noCompareNegZero": "error",
        "noControlCharactersInRegex": "error",
        "noDebugger": "error",
        "noDuplicateCase": "error",
        "noDuplicateClassMembers": "error",
        "noDuplicateObjectKeys": "error",
        "noDuplicateParameters": "error",
        "noEmptyBlockStatements": "error",
        "noExplicitAny": "off",
        "noFallthroughSwitchClause": "error",
        "noFunctionAssign": "error",
        "noGlobalAssign": "error",
        "noImportAssign": "error",
        "noMisleadingCharacterClass": "error",
        "noPrototypeBuiltins": "error",
        "noRedeclare": "error",
        "noShadowRestrictedNames": "error",
        "noUnsafeNegation": "error",
        "useGetterReturn": "error",
        "useValidTypeof": "error"
      }
    }
  }
}
